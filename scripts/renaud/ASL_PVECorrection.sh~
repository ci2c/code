#! /bin/bash

if [ $# -lt 8 ]
then
	echo ""
	echo "Usage: ASL_PVECorrection.sh -sd <SUBJECTS_DIR>  -subj <SUBJ_ID>  -i <input>  -o <path>  [-new ] "
	echo ""
	echo "  -sd                          : Path to FreeSurfer output directory (i.e. SUBJECTS_DIR)"
	echo "  -subj                        : Subject I "
	echo "  -i                           : CBF map "
	echo "  -o                           : output folder "
	echo "  -new                         : new PVE correction "
	echo ""
	echo "Usage: ASL_PVECorrection.sh -sd <SUBJECTS_DIR>  -subj <SUBJ_ID>  -i <input>  -o <path>  [-new ] "
	echo ""
	exit 1
fi

HOME=/home/renaud
index=1
isNew=0

while [ $index -le $# ]
do
	eval arg=\${$index}
	case "$arg" in
	-h|-help)
		echo ""
		echo "Usage: ASL_PVECorrection.sh -sd <SUBJECTS_DIR>  -subj <SUBJ_ID>  -i <input>  -o <path>  [-new ] "
		echo ""
		echo "  -sd                          : Path to FreeSurfer output directory (i.e. SUBJECTS_DIR)"
		echo "  -subj                        : Subject I "
		echo "  -i                           : CBF map "
		echo "  -o                           : output folder "
		echo "  -new                         : new PVE correction "
		echo ""
		echo "Usage: ASL_PVECorrection.sh -sd <SUBJECTS_DIR>  -subj <SUBJ_ID>  -i <input>  -o <path>  [-new ] "
		echo ""
		exit 1
		;;
	-sd)
		index=$[$index+1]
		eval SUBJECTS_DIR=\${$index}
		echo "SUBJECTS DIR : $SUBJECTS_DIR"
		;;
	-subj)
		index=$[$index+1]
		eval SUBJ=\${$index}
		echo "Subject's name : $SUBJ"
		;;
	-i)
		index=$[$index+1]
		eval CBF=\${$index}
		echo "CBF map : $CBF"
		;;
	-o)
		index=$[$index+1]
		eval outdir=\${$index}
		echo "output folder : $outdir"
		;;
	-new)
		isNew=1
		echo "new PVE correction"
		;;
	-*)
		eval infile=\${$index}
		echo "${infile} : unknown option"
		echo ""
		echo "Usage: ASL_PVECorrection.sh -sd <SUBJECTS_DIR>  -subj <SUBJ_ID>  -i <input>  -o <path>  [-new ] "
		echo ""
		echo "  -sd                          : Path to FreeSurfer output directory (i.e. SUBJECTS_DIR)"
		echo "  -subj                        : Subject I "
		echo "  -i                           : CBF map "
		echo "  -o                           : output folder "
		echo "  -new                         : new PVE correction "
		echo ""
		echo "Usage: ASL_PVECorrection.sh -sd <SUBJECTS_DIR>  -subj <SUBJ_ID>  -i <input>  -o <path>  [-new ] "
		echo ""
		exit 1
		;;
	esac
	index=$[$index+1]
done

indir=${SUBJECTS_DIR}/${SUBJ}

if [ -d ${outdir} ]
then
    rm -rf ${outdir}/*
else
    mkdir ${outdir}
fi

if [ ${isNew} -eq 1 ]
then
        
    mri_convert ${indir}/mri/T1.mgz ${outdir}/T1.nii --out_orientation LAS
    
/usr/local/matlab11/bin/matlab -nodisplay <<EOF
      
    HOME = getenv('HOME');
    configfile = [HOME, '/SVN/matlab/pierre/pve/config_pvec'];
      
    t1_path='${outdir}/T1.nii';
    pet_path='${CBF}';
    outdir='${outdir}';
      
    V = spm_vol(t1_path);
    [Y, XYZ] = spm_read_vols(V);
    V.fname = [outdir, '/t1.img'];
    spm_write_vol(V, Y);

    V = spm_vol(pet_path);
    [Y, XYZ] = spm_read_vols(V);
    V.fname = [outdir, '/rpet.img'];
    spm_write_vol(V, Y);

    t1_path = [outdir, '/t1.img'];
    pet_path = [outdir, '/rpet.img'];
      
    disp('Segmentation T1');     
    %% Step 1. Segment T1 using spm12 segment function
    %--------------------------------------------------------------------------
      
    %% Initialise SPM defaults    
    spm('defaults', 'FMRI');
    spm_jobman('initcfg');
    matlabbatch={};
      
    if strcmp(spm('ver'),'SPM8')
	matlabbatch{end+1}.spm.tools.preproc8.channel.vols = {[t1_path ',1']};
	matlabbatch{end}.spm.tools.preproc8.channel.biasreg = 0.0001;
	matlabbatch{end}.spm.tools.preproc8.channel.biasfwhm = 60;
	matlabbatch{end}.spm.tools.preproc8.channel.write = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(1).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,1'};
	matlabbatch{end}.spm.tools.preproc8.tissue(1).ngaus = 2;
	matlabbatch{end}.spm.tools.preproc8.tissue(1).native = [1 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(1).warped = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(2).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,2'};
	matlabbatch{end}.spm.tools.preproc8.tissue(2).ngaus = 2;
	matlabbatch{end}.spm.tools.preproc8.tissue(2).native = [1 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(2).warped = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(3).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,3'};
	matlabbatch{end}.spm.tools.preproc8.tissue(3).ngaus = 2;
	matlabbatch{end}.spm.tools.preproc8.tissue(3).native = [1 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(3).warped = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(4).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,4'};
	matlabbatch{end}.spm.tools.preproc8.tissue(4).ngaus = 3;
	matlabbatch{end}.spm.tools.preproc8.tissue(4).native = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(4).warped = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(5).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,5'};
	matlabbatch{end}.spm.tools.preproc8.tissue(5).ngaus = 4;
	matlabbatch{end}.spm.tools.preproc8.tissue(5).native = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(5).warped = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(6).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,6'};
	matlabbatch{end}.spm.tools.preproc8.tissue(6).ngaus = 2;
	matlabbatch{end}.spm.tools.preproc8.tissue(6).native = [0 0];
	matlabbatch{end}.spm.tools.preproc8.tissue(6).warped = [0 0];
	matlabbatch{end}.spm.tools.preproc8.warp.reg = 4;
	matlabbatch{end}.spm.tools.preproc8.warp.affreg = 'mni';
	matlabbatch{end}.spm.tools.preproc8.warp.samp = 3;
	matlabbatch{end}.spm.tools.preproc8.warp.write = [0 0];

    else
	matlabbatch{end+1}.spm.spatial.preproc.channel.vols = {[t1_path ',1']};
	matlabbatch{end}.spm.spatial.preproc.channel.biasreg = 0.0001;
	matlabbatch{end}.spm.spatial.preproc.channel.biasfwhm = 60;
	matlabbatch{end}.spm.spatial.preproc.channel.write = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(1).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,1'};
	matlabbatch{end}.spm.spatial.preproc.tissue(1).ngaus = 2;
	matlabbatch{end}.spm.spatial.preproc.tissue(1).native = [1 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(1).warped = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(2).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,2'};
	matlabbatch{end}.spm.spatial.preproc.tissue(2).ngaus = 2;
	matlabbatch{end}.spm.spatial.preproc.tissue(2).native = [1 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(2).warped = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(3).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,3'};
	matlabbatch{end}.spm.spatial.preproc.tissue(3).ngaus = 2;
	matlabbatch{end}.spm.spatial.preproc.tissue(3).native = [1 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(3).warped = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(4).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,4'};
	matlabbatch{end}.spm.spatial.preproc.tissue(4).ngaus = 3;
	matlabbatch{end}.spm.spatial.preproc.tissue(4).native = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(4).warped = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(5).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,5'};
	matlabbatch{end}.spm.spatial.preproc.tissue(5).ngaus = 4;
	matlabbatch{end}.spm.spatial.preproc.tissue(5).native = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(5).warped = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(6).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,6'};
	matlabbatch{end}.spm.spatial.preproc.tissue(6).ngaus = 2;
	matlabbatch{end}.spm.spatial.preproc.tissue(6).native = [0 0];
	matlabbatch{end}.spm.spatial.preproc.tissue(6).warped = [0 0];
	matlabbatch{end}.spm.spatial.preproc.warp.mrf = 1;
	matlabbatch{end}.spm.spatial.preproc.warp.cleanup = 1;
	matlabbatch{end}.spm.spatial.preproc.warp.reg = [0 0.001 0.5 0.05 0.2];
	matlabbatch{end}.spm.spatial.preproc.warp.affreg = 'mni';
	matlabbatch{end}.spm.spatial.preproc.warp.fwhm = 0;
	matlabbatch{end}.spm.spatial.preproc.warp.samp = 3;
	matlabbatch{end}.spm.spatial.preproc.warp.write = [0 0];
    end
    
    spm_jobman('run',matlabbatch);
    
    disp('correction volume partiel');
      
    %% Step 2. Rescale prob maps to [0 255]
    %% Rename them to _segN.img
    %% Create _GMROI.img
    %--------------------------------------------------------------------------

    Vt1   = spm_vol(t1_path);
    Vseg1 = spm_vol([outdir, '/c1t1.nii']);
    Vseg2 = spm_vol([outdir, '/c2t1.nii']);
    Vseg3 = spm_vol([outdir, '/c3t1.nii']);

    [Y1, XYZ] = spm_read_vols(Vseg1);
    [Y2, XYZ] = spm_read_vols(Vseg2);
    [Y3, XYZ] = spm_read_vols(Vseg3);

    Y1 = Y1 * 255;
    Y2 = Y2 * 255;
    Y3 = Y3 * 255;

    Y_roi = 51 * double(Y1 > 127.5) + 2 * double(Y2 > 127.5) + 3 * double(Y3 > 127.5);
    Vt1.dt = [2 0];

    Vt1.fname = [outdir, '/t1_seg1.img'];
    spm_write_vol(Vt1, Y1);
    Vt1.fname = [outdir, '/t1_seg2.img'];
    spm_write_vol(Vt1, Y2);
    Vt1.fname = [outdir, '/t1_seg3.img'];
    spm_write_vol(Vt1, Y3);

    Vt1.fname = [outdir, '/t1_GMROI.img'];
    spm_write_vol(Vt1, Y_roi);
      
    %% Step 3. Launch pve
    %--------------------------------------------------------------------------
    
    mni = round(Vt1.dim(3) / 3);
    gmROI_path = [outdir, '/t1_GMROI.img'];
    rpet_path  = [outdir, '/rpet.img'];
    cmdline = ['/home/gregory/matlab/pvelab-20100419/IBB_wrapper/pve/pve -w -s -cs ', num2str(mni), ' ', gmROI_path, ' ', rpet_path, ' ', configfile];
    fid = fopen([outdir '/cmdline.txt'], 'w');
    fprintf(fid, '%s', cmdline);
    fclose(fid);
    disp('Performing PVEc. Please wait...');
    result = system(cmdline);
      
    %% Step 4. Coregister t1_MGRousset.img onto T1
    %--------------------------------------------------------------------------
      
    file_to_copy = '${outdir}/rpet.hdr';
    file_out = '${outdir}/t1_MGRousset.hdr';
    copyfile(file_to_copy,file_out,'f');
    file_out = '${outdir}/t1_Occu_Meltzer.hdr';
    copyfile(file_to_copy,file_out,'f');
    file_out = '${outdir}/t1_Occu_MG.hdr';
    copyfile(file_to_copy,file_out,'f');
EOF

else

    mri_convert ${indir}/mri/aparc.a2009s+aseg.mgz ${outdir}/aparc.nii --out_orientation LAS
    mri_convert ${indir}/mri/T1.mgz ${outdir}/T1.nii --out_orientation LAS
    mri_convert ${indir}/mri/ribbon.mgz ${outdir}/ribbon.nii --out_orientation LAS

    # SPM SEGMENTATION OF T1
/usr/local/matlab11/bin/matlab -nodisplay <<EOF

	% Load Matlab Path
	cd ${HOME}
	p = pathdef;
	addpath(p);
	
	disp('Segmentation T1');     
	%% Segment T1 using spm segment function
	%--------------------------------------------------------------------------
	outdir = '${outdir}';
	
	t1_path='${outdir}/T1.nii';
	pet_path='${CBF}';

	V = spm_vol(t1_path);
	[Y, XYZ] = spm_read_vols(V);
	V.fname = [outdir, '/t1.img'];
	spm_write_vol(V, Y);
	
	V = spm_vol(pet_path);
	[Y, XYZ] = spm_read_vols(V);
	V.fname = [outdir, '/rpet.img'];
	spm_write_vol(V, Y);
	
	%% Initialise SPM defaults    
	spm('defaults', 'FMRI');
	spm_jobman('initcfg');
	matlabbatch={};
	  
	if strcmp(spm('ver'),'SPM8')
	    matlabbatch{end+1}.spm.tools.preproc8.channel.vols = {[t1_path ',1']};
	    matlabbatch{end}.spm.tools.preproc8.channel.biasreg = 0.0001;
	    matlabbatch{end}.spm.tools.preproc8.channel.biasfwhm = 60;
	    matlabbatch{end}.spm.tools.preproc8.channel.write = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(1).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,1'};
	    matlabbatch{end}.spm.tools.preproc8.tissue(1).ngaus = 2;
	    matlabbatch{end}.spm.tools.preproc8.tissue(1).native = [1 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(1).warped = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(2).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,2'};
	    matlabbatch{end}.spm.tools.preproc8.tissue(2).ngaus = 2;
	    matlabbatch{end}.spm.tools.preproc8.tissue(2).native = [1 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(2).warped = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(3).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,3'};
	    matlabbatch{end}.spm.tools.preproc8.tissue(3).ngaus = 2;
	    matlabbatch{end}.spm.tools.preproc8.tissue(3).native = [1 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(3).warped = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(4).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,4'};
	    matlabbatch{end}.spm.tools.preproc8.tissue(4).ngaus = 3;
	    matlabbatch{end}.spm.tools.preproc8.tissue(4).native = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(4).warped = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(5).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,5'};
	    matlabbatch{end}.spm.tools.preproc8.tissue(5).ngaus = 4;
	    matlabbatch{end}.spm.tools.preproc8.tissue(5).native = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(5).warped = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(6).tpm = {'/home/global/matlab_toolbox/spm8/toolbox/Seg/TPM.nii,6'};
	    matlabbatch{end}.spm.tools.preproc8.tissue(6).ngaus = 2;
	    matlabbatch{end}.spm.tools.preproc8.tissue(6).native = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.tissue(6).warped = [0 0];
	    matlabbatch{end}.spm.tools.preproc8.warp.reg = 4;
	    matlabbatch{end}.spm.tools.preproc8.warp.affreg = 'mni';
	    matlabbatch{end}.spm.tools.preproc8.warp.samp = 3;
	    matlabbatch{end}.spm.tools.preproc8.warp.write = [0 0];

	else
	    matlabbatch{end+1}.spm.spatial.preproc.channel.vols = {[t1_path ',1']};
	    matlabbatch{end}.spm.spatial.preproc.channel.biasreg = 0.0001;
	    matlabbatch{end}.spm.spatial.preproc.channel.biasfwhm = 60;
	    matlabbatch{end}.spm.spatial.preproc.channel.write = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(1).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,1'};
	    matlabbatch{end}.spm.spatial.preproc.tissue(1).ngaus = 2;
	    matlabbatch{end}.spm.spatial.preproc.tissue(1).native = [1 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(1).warped = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(2).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,2'};
	    matlabbatch{end}.spm.spatial.preproc.tissue(2).ngaus = 2;
	    matlabbatch{end}.spm.spatial.preproc.tissue(2).native = [1 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(2).warped = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(3).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,3'};
	    matlabbatch{end}.spm.spatial.preproc.tissue(3).ngaus = 2;
	    matlabbatch{end}.spm.spatial.preproc.tissue(3).native = [1 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(3).warped = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(4).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,4'};
	    matlabbatch{end}.spm.spatial.preproc.tissue(4).ngaus = 3;
	    matlabbatch{end}.spm.spatial.preproc.tissue(4).native = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(4).warped = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(5).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,5'};
	    matlabbatch{end}.spm.spatial.preproc.tissue(5).ngaus = 4;
	    matlabbatch{end}.spm.spatial.preproc.tissue(5).native = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(5).warped = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(6).tpm = {'/home/global/matlab_toolbox/spm12b/tpm/TPM.nii,6'};
	    matlabbatch{end}.spm.spatial.preproc.tissue(6).ngaus = 2;
	    matlabbatch{end}.spm.spatial.preproc.tissue(6).native = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.tissue(6).warped = [0 0];
	    matlabbatch{end}.spm.spatial.preproc.warp.mrf = 1;
	    matlabbatch{end}.spm.spatial.preproc.warp.cleanup = 1;
	    matlabbatch{end}.spm.spatial.preproc.warp.reg = [0 0.001 0.5 0.05 0.2];
	    matlabbatch{end}.spm.spatial.preproc.warp.affreg = 'mni';
	    matlabbatch{end}.spm.spatial.preproc.warp.fwhm = 0;
	    matlabbatch{end}.spm.spatial.preproc.warp.samp = 3;
	    matlabbatch{end}.spm.spatial.preproc.warp.write = [0 0];
	end
	
	spm_jobman('run',matlabbatch);
	
EOF

    # GM mask
    mri_extract_label ${outdir}/ribbon.nii 42 3 ${outdir}/ribbon_gm.nii
    mri_extract_label ${outdir}/aparc.nii 50 11 49 10 53 17 54 18 51 12 52 13 58 26 47 8 ${outdir}/ss_cort_gm.nii
    mri_binarize --i ${outdir}/c1T1.nii --min 0.5 --binval 1 --o ${outdir}/c1T1b.nii
    mri_or ${outdir}/c1T1b.nii ${outdir}/ribbon_gm.nii ${outdir}/ss_cort_gm.nii ${outdir}/mask_gm1.nii
    mri_binarize --i ${outdir}/mask_gm1.nii --min 0.5 --binval 1 --o ${outdir}/mask_gm.nii
    rm -f ${outdir}/mask_gm1.nii ${outdir}/ribbon_gm.nii ${outdir}/ribbon.nii ${outdir}/c1T1b.nii

    # WM mask
    mri_extract_label ${outdir}/aparc.nii 41 2 16 46 7 251 252 253 254 255 ${outdir}/WM.nii
    mri_binarize --i ${outdir}/WM.nii --min 0.5 --binval 1 --o ${outdir}/WMb.nii
    fslmaths ${outdir}/WMb.nii -sub ${outdir}/mask_gm.nii ${outdir}/WMb1.nii
    mri_binarize --i ${outdir}/WMb1.nii.gz --min 0.5 --binval 1 --o ${outdir}/mask_wm.nii
    rm -f ${outdir}/WMb.nii ${outdir}/WMb1.nii.gz ${outdir}/WM.nii

    # CSF mask
    mri_binarize --i ${outdir}/c3T1.nii --min 0.5 --binval 1 --o ${outdir}/c3T1b.nii
    fslmaths ${outdir}/mask_gm.nii -add ${outdir}/mask_wm.nii ${outdir}/mask_wm_gm.nii
    fslmaths ${outdir}/c3T1b.nii -sub ${outdir}/mask_wm_gm.nii.gz ${outdir}/CSF.nii
    mri_binarize --i ${outdir}/CSF.nii.gz --min 0.5 --binval 1 --o ${outdir}/mask_csf.nii
    rm -f ${outdir}/CSF.nii.gz ${outdir}/c3T1b.nii ${outdir}/mask_wm_gm.nii.gz

    # DO PVE CORRECTION
/usr/local/matlab11/bin/matlab -nodisplay <<EOF

	% Load Matlab Path
	cd ${HOME}
	p = pathdef;
	addpath(p);
	
	HOME = getenv('HOME');
	configfile = [HOME, '/SVN/matlab/pierre/pve/config_pvec'];
	
	outdir = '${outdir}';
	
	%% Step 2. Rescale prob maps to [0 255]
	%% Rename them to _segN.img
	%% Create _GMROI.img
	%--------------------------------------------------------------------------

	t1_path = [outdir, '/t1.img'];
	
	Vt1   = spm_vol(t1_path);
	Vseg1 = spm_vol([outdir, '/mask_gm.nii']);
	Vseg2 = spm_vol([outdir, '/mask_wm.nii']);
	Vseg3 = spm_vol([outdir, '/mask_csf.nii']);

	[Y1, XYZ] = spm_read_vols(Vseg1);
	[Y2, XYZ] = spm_read_vols(Vseg2);
	[Y3, XYZ] = spm_read_vols(Vseg3);

	Y_roi = 51 * double(Y1 > 0) + 2 * double(Y2 > 0) + 3 * double(Y3 > 0);
	Vt1.dt = [2 0];

	Vt1.fname = [outdir, '/t1_seg1.img'];
	spm_write_vol(Vt1, Y1);
	Vt1.fname = [outdir, '/t1_seg2.img'];
	spm_write_vol(Vt1, Y2);
	Vt1.fname = [outdir, '/t1_seg3.img'];
	spm_write_vol(Vt1, Y3);

	Vt1.fname = [outdir, '/t1_GMROI.img'];
	spm_write_vol(Vt1, Y_roi);
	
	%% Step 3. Launch pve
	%--------------------------------------------------------------------------
	pet_path = [outdir, '/rpet.img'];
	
	mni = round(Vt1.dim(3) / 3);
	gmROI_path = [outdir, '/t1_GMROI.img'];
	rpet_path  = [outdir, '/rpet.img'];
	cmdline = ['/home/gregory/matlab/pvelab-20100419/IBB_wrapper/pve/pve -w -s -cs ', num2str(mni), ' ', gmROI_path, ' ', rpet_path, ' ', configfile];
	fid = fopen([outdir '/cmdline.txt'], 'w');
	fprintf(fid, '%s', cmdline);
	fclose(fid);
	disp('Performing PVEc. Please wait...');
	result = system(cmdline);
	  
	%% Step 4. Coregister t1_MGRousset.img onto T1
	%--------------------------------------------------------------------------
	  
	file_to_copy = '${outdir}/rpet.hdr';
	file_out = '${outdir}/t1_MGRousset.hdr';
	copyfile(file_to_copy,file_out,'f');
	file_out = '${outdir}/t1_Occu_Meltzer.hdr';
	copyfile(file_to_copy,file_out,'f');
	file_out = '${outdir}/t1_Occu_MG.hdr';
	copyfile(file_to_copy,file_out,'f');
	
EOF

fi



    
    
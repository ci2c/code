function class = train_class(init)
% 
% train_class trains classifiers for FCD detection
% 
% usage : train_class(init)
% 
% INPUTS :
%       init : initialization structure - generated by initvar.m and
%       generate_variables.m
%
% OUTPUTS : 
%       class : structure containing classifiers
%
%
%
% For Automatic Detection of Focal Cortical Dysplasia
% Tanguy Hamel @ CHRU Lille, 2012



%%
% For Automatic Detection of Focal Cortical Dysplasia
% Tanguy Hamel @ CHRU Lille, 2012



%% Preparation

% Creating lesional tissue matrix
%
% Lesion data recovery
global_lesion = lesional_tissue(init);


% Healthy data recovery
global_control = non_lesional_tissue(init);



% verification

if init.nbles > size(global_lesion,2) | init.nbhea > size(global_control,2)
    warning(strcat('nombre de vertex lesionnels max = ', num2str(size(global_lesion,2))));
    warning(strcat('nombre de vertex de controle max = ', num2str(size(global_control,2))));
    return
end

% Checking data presence

if ~all(cellfun(@(name) exist(strcat(init.pat_SD,'/',name))==7,init.train))
    warning(strcat('for patients who have a label, you must have images in init.pat_SD'))
    warning(init.pat_SD)
    return
end


%% NEURAL NETWORKS

if init.nbnn == 0
    disp('no neural network')
else
    
    class.net = train_nn(init, global_lesion, global_control);
    
end

%% DECISION TREES


if init.nbdt == 0
    disp('no decision trees')
else
    class.T = train_dt(init, global_lesion, global_control);
end


%% SVM (-LibSvm)


if init.nbsvm == 0
    disp('no svm')
else
    class.SVM = train_svm(init, global_lesion, global_control);
end

clear all;
close all;

AutoDataProcessParameter.DataProcessDir = '/home/fatmike/renaud/test_rest';
AutoDataProcessParameter.SubjectNum = 1;
AutoDataProcessParameter.SubjectID{1} = 'Sub_001';
ProgramPath = '/home/renaud/matlab/rest_toolbox/DPARSF';
AutoDataProcessParameter.Normalize.AffineRegularisationInSegmentation = 'mni';

% Backup the T1 images to T1ImgNewSegment
cd([AutoDataProcessParameter.DataProcessDir,filesep,'T1Img']);

% Check in co* image exist. Added by YAN Chao-Gan 100510.
cd(AutoDataProcessParameter.SubjectID{1});

DirCo = dir('co*.img');
if isempty(DirCo)
    DirImg = dir('*.img');
    if length(DirImg)==1
        button = questdlg(['No co* T1 image (T1 image which is reoriented to the nearest orthogonal direction to ''canonical space'' and removed excess air surrounding the individual as well as parts of the neck below the cerebellum) is found. Do you want to use the T1 image without co? Such as: ',DirImg(1).name,'? Note: this image will be added a prefix ''co'' in the following analysis.'],'No co* T1 image is found','Yes','No','Yes');
        if strcmpi(button,'Yes')
            UseNoCoT1Image=1;
        else
            return;
        end
    else
        errordlg(['No co* T1 image (T1 image which is reoriented to the nearest orthogonal direction to ''canonical space'' and removed excess air surrounding the individual as well as parts of the neck below the cerebellum) is found. And there are too many T1 images detected in T1Img directory. Please determine which T1 image you want to use in unified segmentation and delete the others from the T1Img directory, then re-run the analysis.'],'No co* T1 image is found');
        return;
    end
else
    UseNoCoT1Image=0;
end
cd('..');

for i=1:AutoDataProcessParameter.SubjectNum
    cd(AutoDataProcessParameter.SubjectID{i});
    mkdir(['..',filesep,'..',filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i}])
    % Check in co* image exist. Added by YAN Chao-Gan 100510.
    if UseNoCoT1Image==0
        copyfile('co*',['..',filesep,'..',filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i}])
    else
        DirHdr=dir('*.hdr');
        DirImg=dir('*.img');
        copyfile(DirHdr(1).name,['..',filesep,'..',filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,'co',DirHdr(1).name]);
        copyfile(DirImg(1).name,['..',filesep,'..',filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,'co',DirImg(1).name]);
    end
    cd('..');
    fprintf(['Copying T1 image Files:',AutoDataProcessParameter.SubjectID{i},' OK']);
end
fprintf('\n');

%Coregister
load([ProgramPath,filesep,'Jobmats',filesep,'Coregister.mat']);
cd([AutoDataProcessParameter.DataProcessDir,filesep,'FunImg']);
for i = 1:AutoDataProcessParameter.SubjectNum
    RefDir     = dir([AutoDataProcessParameter.DataProcessDir,filesep,'FunImg',filesep,AutoDataProcessParameter.SubjectID{i},filesep,'mean*.img']);
    RefFile    = [AutoDataProcessParameter.DataProcessDir,filesep,'FunImg',filesep,AutoDataProcessParameter.SubjectID{i},filesep,RefDir(1).name,',1'];
    SourceDir  = dir([AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,'co*.img']);
    SourceFile = [AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,SourceDir(1).name];
    if i~=1
        jobs=[jobs,{jobs{1,1}}];
    end
    jobs{1,i}.spatial{1,1}.coreg{1,1}.estimate.ref    = {RefFile};
    jobs{1,i}.spatial{1,1}.coreg{1,1}.estimate.source = {SourceFile};
    fprintf(['Normalize-Coregister Setup:',AutoDataProcessParameter.SubjectID{i},' OK']);
end
fprintf('\n');
if SPMversion==5
    spm_jobman('run',jobs);
elseif SPMversion==8  %YAN Chao-Gan, 090925. SPM8 compatible.
    jobs = spm_jobman('spm5tospm8',{jobs});
    spm_jobman('run',jobs{1});
else
    uiwait(msgbox('The current SPM version is not supported by DPARSF. Please install SPM5 or SPM8 first.','Invalid SPM Version.'));
    return
end

%New Segment
T1ImgSegmentDirectoryName = 'T1ImgNewSegment';
load([ProgramPath,filesep,'Jobmats',filesep,'NewSegment.mat']);
[SPMPath, fileN, extn] = fileparts(which('spm.m'));
for T1ImgSegmentDirectoryNameue = 1:6
    matlabbatch{1,1}.spm.tools.preproc8.tissue(1,T1ImgSegmentDirectoryNameue).tpm{1,1}=[SPMPath,filesep,'toolbox',filesep,'Seg',filesep,'TPM.nii',',',num2str(T1ImgSegmentDirectoryNameue)];
    matlabbatch{1,1}.spm.tools.preproc8.tissue(1,T1ImgSegmentDirectoryNameue).warped = [0 0]; % Do not need warped results. Warp by DARTEL
end
if strcmpi(AutoDataProcessParameter.Normalize.AffineRegularisationInSegmentation,'mni')
    matlabbatch{1,1}.spm.tools.preproc8.warp.affreg = 'mni';
else
    matlabbatch{1,1}.spm.tools.preproc8.warp.affreg = 'eastern';
end

T1SourceFileSet = []; % Save to use in the step of DARTEL normalize to MNI
cd([AutoDataProcessParameter.DataProcessDir,filesep,T1ImgSegmentDirectoryName]);
for i = 1:AutoDataProcessParameter.SubjectNum
    SourceDir = dir([AutoDataProcessParameter.DataProcessDir,filesep,T1ImgSegmentDirectoryName,filesep,AutoDataProcessParameter.SubjectID{i},filesep,'*.img']);
    if isempty(SourceDir)  %YAN Chao-Gan, 111114. Also support .nii files.
        SourceDir = dir([AutoDataProcessParameter.DataProcessDir,filesep,T1ImgSegmentDirectoryName,filesep,AutoDataProcessParameter.SubjectID{i},filesep,'*.nii']);
    end
    SourceFile = [AutoDataProcessParameter.DataProcessDir,filesep,T1ImgSegmentDirectoryName,filesep,AutoDataProcessParameter.SubjectID{i},filesep,SourceDir(1).name];
    if i~=1
        matlabbatch = [matlabbatch,{matlabbatch{1,1}}];
    end
    matlabbatch{1,i}.spm.tools.preproc8.channel.vols = {SourceFile};
    T1SourceFileSet = [T1SourceFileSet;{SourceFile}];
    fprintf(['Normalize-Segment Setup:',AutoDataProcessParameter.SubjectID{i},' OK']);
end
fprintf('\n');
spm_jobman('run',matlabbatch);


%DARTEL: Create Template
load([ProgramPath,filesep,'Jobmats',filesep,'Dartel_CreateTemplate.mat']);
%Look for rc1* and rc2* images.
cd([AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment']);
rc1FileList=[];
rc2FileList=[];
for i = 1:AutoDataProcessParameter.SubjectNum
    cd(AutoDataProcessParameter.SubjectID{i});
    DirImg      = dir('rc1*');
    rc1FileList = [rc1FileList;{[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]}];
    DirImg      = dir('rc2*');
    rc2FileList = [rc2FileList;{[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]}];
    cd('..');
end
matlabbatch{1,1}.spm.tools.dartel.warp.images{1,1} = rc1FileList;
matlabbatch{1,1}.spm.tools.dartel.warp.images{1,2} = rc2FileList;
fprintf(['Running DARTEL: Create Template.\n']);
spm_jobman('run',matlabbatch);

% DARTEL: Normalize to MNI space - GM, WM, CSF and T1 Images.
load([ProgramPath,filesep,'Jobmats',filesep,'Dartel_NormaliseToMNI_ManySubjects.mat']);
cd([AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment']);
FlowFieldFileList = [];
GMFileList        = [];
WMFileList        = [];
CSFFileList       = [];
for i = 1:AutoDataProcessParameter.SubjectNum
    cd(AutoDataProcessParameter.SubjectID{i});
    DirImg            = dir('u_*');
    FlowFieldFileList = [FlowFieldFileList;{[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]}];
    DirImg            = dir('c1*');
    GMFileList        = [GMFileList;{[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]}];
    DirImg            = dir('c2*');
    WMFileList        = [WMFileList;{[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]}];
    DirImg            = dir('c3*');
    CSFFileList       = [CSFFileList;{[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]}];

    if i==1
        DirImg = dir('Template_6.*');
        TemplateFile = {[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]};
    end
    cd('..');
end

matlabbatch{1,1}.spm.tools.dartel.mni_norm.template               = TemplateFile;
matlabbatch{1,1}.spm.tools.dartel.mni_norm.data.subjs.flowfields  = FlowFieldFileList;

matlabbatch{1,1}.spm.tools.dartel.mni_norm.data.subjs.images{1,1} = GMFileList;
matlabbatch{1,1}.spm.tools.dartel.mni_norm.data.subjs.images{1,2} = WMFileList;
matlabbatch{1,1}.spm.tools.dartel.mni_norm.data.subjs.images{1,3} = CSFFileList;

fprintf(['Running DARTEL: Normalize to MNI space for VBM. Modulated version With smooth kernel [8 8 8].\n']);
spm_jobman('run',matlabbatch);

matlabbatch{1,1}.spm.tools.dartel.mni_norm.fwhm = [0 0 0]; % Do not want to perform smooth
fprintf(['Running DARTEL: Normalize to MNI space for VBM. Modulated version.\n']);
spm_jobman('run',matlabbatch);

matlabbatch{1,1}.spm.tools.dartel.mni_norm.preserve = 0;
if exist('T1SourceFileSet','var')
    matlabbatch{1,1}.spm.tools.dartel.mni_norm.data.subjs.images{1,4} = T1SourceFileSet;
end
fprintf(['Running DARTEL: Normalize to MNI space for VBM. Unmodulated version.\n']);
spm_jobman('run',matlabbatch);

% DARTEL: Normalize to MNI space - Functional Images.
load([ProgramPath,filesep,'Jobmats',filesep,'Dartel_NormaliseToMNI_FewSubjects.mat']);

matlabbatch{1,1}.spm.tools.dartel.mni_norm.fwhm     = [0 0 0];
matlabbatch{1,1}.spm.tools.dartel.mni_norm.preserve = 0;
matlabbatch{1,1}.spm.tools.dartel.mni_norm.bb =AutoDataProcessParameter.Normalize.BoundingBox;
matlabbatch{1,1}.spm.tools.dartel.mni_norm.vox=AutoDataProcessParameter.Normalize.VoxSize;

DirImg=dir([AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{1},filesep,'Template_6.*']);
matlabbatch{1,1}.spm.tools.dartel.mni_norm.template={[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{1},filesep,DirImg(1).name]};

cd([AutoDataProcessParameter.DataProcessDir,filesep,'FunImg']);
for i=1:AutoDataProcessParameter.SubjectNum
    cd(AutoDataProcessParameter.SubjectID{i});
    DirImg=dir('ra*.img');
    if isempty(DirImg)  %YAN Chao-Gan, 111114. Also support .nii files.
        DirImg=dir('ra*.nii');
    end
    if length(DirImg)~=AutoDataProcessParameter.TimePoints
        Error=[Error;{['Error in Normalize: ',AutoDataProcessParameter.SubjectID{i}]}];
    end
    FileList=[];
    for j=1:length(DirImg)
        FileList=[FileList;{[AutoDataProcessParameter.DataProcessDir,filesep,'FunImg',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(j).name]}];
    end

    matlabbatch{1,1}.spm.tools.dartel.mni_norm.data.subj(1,i).images=FileList;

    DirImg=dir([AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,'u_*']);
    matlabbatch{1,1}.spm.tools.dartel.mni_norm.data.subj(1,i).flowfield={[AutoDataProcessParameter.DataProcessDir,filesep,'T1ImgNewSegment',filesep,AutoDataProcessParameter.SubjectID{i},filesep,DirImg(1).name]};

    cd('..');
    fprintf(['Normalization by using DARTEL Setup:',AutoDataProcessParameter.SubjectID{i},' OK']);
end
fprintf('\n');
spm_jobman('run',matlabbatch);
        

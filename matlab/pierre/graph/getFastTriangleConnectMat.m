function Connectome = getFastTriangleConnectMat(surf_lh, surf_rh, fibers, ref_vol_native, ref_vol_dti, thresh)
% usage : CONNECTOME = getFastTriangleConnectMat(Surf_lh, Surf_rh, fibers, ref_vol_native, ref_vol_dti, [threshold])
%
% INPUTS :
% -------
%    Surf_lh           : Path to left hemisphere surface in native VOLUME space
%    Surf_rh           : Path to right hemisphere surface in native VOLUME space
%
% Important : Make sure that the surfaces are in the volume space ! By
% default, FS surfaces ARE NOT in the volume space and you should use
% surf_to_ras_nii to realign the surfaces.
% Subcortical surfaces, generated by the ModelSubCorticalStruct.sh or
% ModelOneROI_SPHARM.sh functions ARE in the volume space.
% If you runned the PrepareSurfaceConnectome.sh function, cortical surfaces
% in volume space are stored as ${SUBJECTS_DIR}/SUBJ/surf/?h.white.ras
%
% This matlab code expects surfaces in VOLUME space and will not work
% properly otherwise !
%
%    fibers_path       : Path to MRtrix fibers or fibers structure as
%                         returned by f_readFiber_tck
%
%    ref_vol_native    : Path to reference 1mm isotropic volume in native space (.nii) or
%                         header structure as returned by spm_vol
%    
%    ref_volume_dti    : Path to reference 1mm isotropic volume in dti space (.nii) or
%                         header structure as returned by spm_vol
%
% Option :
%    threshold         : Fiber length threshold when importing fibers.
%                         Default : 0
%
% OUTPUT :
% --------
%    Connectome        : Connectome structure
%
% Pierre Besson @ CHRU Lille, February 2013

if nargin ~= 5 && nargin ~= 6
    error('invalid usage');
end

if nargin == 5
    thresh = 0;
end

% load data
if ~ischar(surf_lh)
    error('surf_lh must be a path');
end

if ~ischar(surf_rh)
    error('surf_rh must be a path');
end

surf = SurfStatReadSurf({[surf_lh], [surf_rh]});
% surf = SurfStatReadSurf(surf_lh);

if ischar(fibers)
    if strfind(fibers, '.mat') ~= 0
        load(fibers);
    else
        fibers = f_readFiber_tck(fibers, thresh);
    end
end

if ischar(ref_vol_native)
    ref_vol_native = load_nifti(ref_vol_native);
elseif isstruct(ref_vol_native)
    ref_vol_native = load_nifti(ref_vol_native.fname);
end

if ischar(ref_vol_dti)
    ref_vol_dti = load_nifti(ref_vol_dti);
elseif isstruct(ref_vol_dti)
    ref_vol_dti = load_nifti(ref_vol_dti.fname);
end

% Apply the linear transformation matrix
% surf = surf_to_ras_nii(surf, ref_vol_dti, ref_vol_native);
% surf = surf_to_ras_nii(insurf, nifti, oldnifti)
T = ref_vol_dti.vox2ras/ref_vol_native.vox2ras;
surf.coord = [surf.coord; ones(1, length(surf.coord))];
surf.coord = T * surf.coord;
surf.coord(4,:) = [];

% get variable
nfibers = int32(fibers.nFiberNr);
tri = int32(surf.tri);
coord = single(surf.coord);
fib_coord = single(cat(1, fibers.fiber.xyzFiberCoord));
ids = int32(cat(1, fibers.fiber.id));

% create connectome
tic; [i, j, X, Y, Z] = fast_triangle_matrix(coord, tri, fib_coord, ids, nfibers); toc

Connectome.i  = i;
Connectome.j  = j;
Connectome.X  = X;
Connectome.Y  = Y;
Connectome.Z  = Z;
Connectome.nx = double(nfibers);
Connectome.ny = double(length(surf.tri));